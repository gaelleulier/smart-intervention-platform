name: ${PROJECT_NAME}-prod
services:
  db:
    image: postgres:16-alpine
    container_name: ${PROJECT_NAME}-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 3s
      retries: 10
  backend:
    image: ${BACKEND_IMAGE:-smart-intervention-platform/backend:local}
    build: ./backend
    container_name: ${PROJECT_NAME}-backend
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      SERVER_PORT: 8080
    ports:
      - "${BACKEND_PORT}:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 15s
  frontend:
    image: ${FRONTEND_IMAGE:-smart-intervention-platform/frontend:local}
    build: ./frontend
    container_name: ${PROJECT_NAME}-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
    ports:
      - "${FRONTEND_PORT}:80"
    depends_on:
      backend:
        condition: service_healthy
volumes:
  db_data:
