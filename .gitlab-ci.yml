default:
  tags: ["hetzner"]
  interruptible: true

stages: [test, build, deploy]

# =====================
# Backend — TEST
# =====================
backend:test:
  stage: test
  image: maven:3.9-eclipse-temurin-21
  services:
    - name: postgres:16-alpine
      alias: postgres
      variables:
        POSTGRES_DB: sip_db
        POSTGRES_USER: sip_user
        POSTGRES_PASSWORD: sip_password
  variables:
    MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
    SPRING_PROFILES_ACTIVE: "dev"
    POSTGRES_DB: "sip_db"
    POSTGRES_USER: "sip_user"
    POSTGRES_PASSWORD: "sip_password"
    POSTGRES_HOST: "postgres"
    POSTGRES_PORT: "5432"
  cache:
    key: maven-${CI_COMMIT_REF_SLUG}
    policy: pull-push
    paths:
      - backend/.m2/repository
  before_script:
    - apt-get update && apt-get install -y postgresql-client && rm -rf /var/lib/apt/lists/*
    - cd backend
    - mkdir -p .m2/repository
    - ./mvnw -v
    - until pg_isready -h "$POSTGRES_HOST" -p "$POSTGRES_PORT"; do echo "Waiting for Postgres..."; sleep 2; done
  script:
    - ./mvnw -B test
  artifacts:
    when: always
    reports:
      junit: backend/target/surefire-reports/*.xml
  rules:
    - changes: [ "backend/**", ".gitlab-ci.yml" ]
    - exists:
        - backend/pom.xml

# =====================
# Frontend — TEST (lint/build light)
# =====================
frontend:test:
  stage: test
  image: node:22
  variables:
    CHROME_BIN: "/usr/bin/chromium"
  cache:
    key: npm-${CI_COMMIT_REF_SLUG}
    policy: pull-push
    paths:
      - frontend/.npm/
  before_script:
    - apt-get update && apt-get install -y chromium && rm -rf /var/lib/apt/lists/*
    - cd frontend
    - node -v && npm -v
    - npm config set cache .npm --global
  script:
    - npm ci
    - npm run test -- --watch=false --code-coverage --browsers=ChromeHeadlessNoSandbox
    #- npm run build -- --configuration=development
  artifacts:
    when: always
    paths:
      - frontend/dist/
      - frontend/coverage/
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - changes: [ "frontend/**", ".gitlab-ci.yml" ]
    - exists:
        - frontend/package.json
        - frontend/angular.json

# =====================
# Backend — BUILD (jar)
# =====================
backend:build:
  stage: build
  image: maven:3.9-eclipse-temurin-21
  needs: ["backend:test"]
  variables:
    MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  cache:
    key: maven-${CI_COMMIT_REF_SLUG}
    policy: pull-push
    paths:
      - backend/.m2/repository
  before_script:
    - cd backend
  script:
    - ./mvnw -q -DskipTests package
  artifacts:
    paths:
      - backend/target/*.jar
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes: [ "backend/**", "pom.xml", ".gitlab-ci.yml" ]
    - exists:
        - backend/pom.xml

# =====================
# Frontend — BUILD (prod dist)
# =====================
frontend:build:
  stage: build
  image: node:22
  needs: ["frontend:test"]
  cache:
    key: npm-${CI_COMMIT_REF_SLUG}
    policy: pull-push
    paths:
      - frontend/.npm/
  before_script:
    - cd frontend
    - npm config set cache .npm --global
  script:
    - npm ci --prefer-offline
    - npm run build -- --configuration=production
  artifacts:
    paths:
      - frontend/dist/
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes: [ "frontend/**", "package*.json", "angular.json", ".gitlab-ci.yml" ]
    - exists:
        - frontend/package.json
        - frontend/angular.json

# =====================
# Docker images — build & push (main only)
# =====================
docker:publish:
  tags: ["hetzner"]
  stage: build
  image: docker:27.3.1
  services:
    - name: docker:27.3.1-dind
      alias: docker
      command: ["--mtu=1460", "--host=tcp://0.0.0.0:2375", "--tls=false"]
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  needs:
    - backend:build
    - frontend:build
  before_script:
    - docker version
    - echo "$CI_JOB_TOKEN" | docker login -u gitlab-ci-token --password-stdin "$CI_REGISTRY"
    - docker buildx create --name ci-builder --driver docker-container --use || docker buildx use ci-builder
  script:
    - |
      docker buildx build \
        --platform linux/amd64 \
        --push \
        -t "$CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHORT_SHA" \
        -t "$CI_REGISTRY_IMAGE/backend:main" \
        -f backend/Dockerfile backend
    - |
      docker buildx build \
        --platform linux/amd64 \
        --push \
        -t "$CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHORT_SHA" \
        -t "$CI_REGISTRY_IMAGE/frontend:main" \
        -f frontend/Dockerfile frontend
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - "backend/**"
        - "frontend/**"
        - "backend/Dockerfile"
        - "frontend/Dockerfile"
        - ".gitlab-ci.yml"

# =====================
# Deploy — production (main only)
# =====================
deploy:prod:
  tags: ["hetzner"]
  stage: deploy
  image: alpine:3.20
  needs:
    - docker:publish
  variables:
    BACKEND_REGISTRY_TAG: "$CI_REGISTRY_IMAGE/backend:main"
    FRONTEND_REGISTRY_TAG: "$CI_REGISTRY_IMAGE/frontend:main"
  before_script:
    - apk add --no-cache openssh-client rsync bash
    - eval "$(ssh-agent -s)"
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    
    - echo "$DEPLOY_SSH_PRIVATE_KEY_B64" | base64 -d > ~/.ssh/id_deploy
    - tr -d '\r' < ~/.ssh/id_deploy > ~/.ssh/id_deploy.clean && mv ~/.ssh/id_deploy.clean ~/.ssh/id_deploy
    - chmod 600 ~/.ssh/id_deploy
    
    - wc -c ~/.ssh/id_deploy
    - ssh-add ~/.ssh/id_deploy
    
    - |
      if [ -n "$DEPLOY_KNOWN_HOSTS" ]; then
        printf '%s\n' "$DEPLOY_KNOWN_HOSTS" > ~/.ssh/known_hosts
      else
        ssh-keyscan -p "${DEPLOY_PORT:-22}" -t ed25519,rsa -H "$DEPLOY_HOST" > ~/.ssh/known_hosts
      fi
      chmod 644 ~/.ssh/known_hosts

    - ssh-add -l
    - ssh -p "${DEPLOY_PORT:-22}" -o StrictHostKeyChecking=yes "$DEPLOY_USER@$DEPLOY_HOST" 'echo OK'

  script:
    - DEPLOY_BACKEND_IMAGE=${DEPLOY_BACKEND_IMAGE:-$BACKEND_REGISTRY_TAG}
    - DEPLOY_FRONTEND_IMAGE=${DEPLOY_FRONTEND_IMAGE:-$FRONTEND_REGISTRY_TAG}
    - rm -rf deploy_bundle && mkdir -p deploy_bundle
    - rsync -av --delete --exclude "frontend/node_modules" --exclude "frontend/dist" --exclude "backend/target" backend frontend docker-compose.prod.yml deploy_bundle/
    - tar -czf deploy_bundle.tar.gz -C deploy_bundle .
    - rm -rf deploy_bundle
    - scp deploy_bundle.tar.gz "$DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH/deploy_bundle.tar.gz"
    - rm deploy_bundle.tar.gz

    - |
      if [ -n "$PROD_ENV_FILE_B64" ]; then
        echo "$PROD_ENV_FILE_B64" | base64 -d > prod.env
        scp -P "${DEPLOY_PORT:-22}" prod.env "$DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH/.env"
        rm -f prod.env
      fi

    - ssh "$DEPLOY_USER@$DEPLOY_HOST" "mkdir -p $DEPLOY_PATH && cd $DEPLOY_PATH && rm -rf backend frontend docker-compose.prod.yml && tar -xzf deploy_bundle.tar.gz && rm deploy_bundle.tar.gz && docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD && BACKEND_IMAGE=$DEPLOY_BACKEND_IMAGE FRONTEND_IMAGE=$DEPLOY_FRONTEND_IMAGE docker compose -f docker-compose.prod.yml pull && BACKEND_IMAGE=$DEPLOY_BACKEND_IMAGE FRONTEND_IMAGE=$DEPLOY_FRONTEND_IMAGE docker compose -f docker-compose.prod.yml up -d --remove-orphans"
  environment:
    name: production
    url: $PROD_PUBLIC_URL
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

# =====================
# Workflow rules
# =====================
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH
    - if: $CI_COMMIT_MESSAGE =~ /(\[skip ci\]|docs:|chore:)/i
      when: never
    - when: always
